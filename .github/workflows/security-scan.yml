# GitHub Actions workflow for automated security scanning
name: Security Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scan weekly on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'

jobs:
  dependency-check:
    name: Dependency Vulnerability Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety

      - name: Run Safety check
        run: |
          safety check -r requirements.txt --output json || true

      - name: Upload Safety results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: safety-results
          path: safety-report.json

  code-security:
    name: Code Security Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Bandit
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml]

      - name: Run Bandit
        run: |
          bandit -r . -c .bandit.yml -f json -o bandit-report.json || true

      - name: Upload Bandit results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: bandit-results
          path: bandit-report.json

  secret-scanning:
    name: Secret Detection
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for secret scanning

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}  # Optional

  django-check:
    name: Django Security Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Django check
        env:
          SECRET_KEY: 'test-secret-key-for-ci-only'
          DEBUG: 'False'
          DATABASE_URL: 'sqlite:///db.sqlite3'
        run: |
          python manage.py check --deploy --fail-level WARNING
