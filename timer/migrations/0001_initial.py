# Generated by Django 4.2.16 on 2025-08-20 13:42

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='UserTimerSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('work_interval_minutes', models.PositiveIntegerField(default=20)),
                ('break_duration_seconds', models.PositiveIntegerField(default=20)),
                ('long_break_minutes', models.PositiveIntegerField(default=5)),
                ('sound_notification', models.BooleanField(default=True)),
                ('desktop_notification', models.BooleanField(default=True)),
                ('email_notification', models.BooleanField(default=False)),
                ('show_progress_bar', models.BooleanField(default=True)),
                ('show_time_remaining', models.BooleanField(default=True)),
                ('dark_mode', models.BooleanField(default=False)),
                ('auto_start_break', models.BooleanField(default=False)),
                ('auto_start_work', models.BooleanField(default=False)),
                ('custom_break_messages', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='timer_settings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Timer Settings',
                'verbose_name_plural': 'User Timer Settings',
                'db_table': 'timer_user_settings',
            },
        ),
        migrations.CreateModel(
            name='TimerSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('work_interval_minutes', models.PositiveIntegerField(default=20)),
                ('break_duration_seconds', models.PositiveIntegerField(default=20)),
                ('total_intervals_completed', models.PositiveIntegerField(default=0)),
                ('total_breaks_taken', models.PositiveIntegerField(default=0)),
                ('total_work_minutes', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='timer_sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Timer Session',
                'verbose_name_plural': 'Timer Sessions',
                'db_table': 'timer_session',
                'ordering': ['-start_time'],
            },
        ),
        migrations.CreateModel(
            name='TimerInterval',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interval_number', models.PositiveIntegerField()),
                ('start_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('completed', 'Completed'), ('skipped', 'Skipped'), ('paused', 'Paused')], default='active', max_length=10)),
                ('reminder_sent', models.BooleanField(default=False)),
                ('reminder_sent_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='intervals', to='timer.timersession')),
            ],
            options={
                'verbose_name': 'Timer Interval',
                'verbose_name_plural': 'Timer Intervals',
                'db_table': 'timer_interval',
                'ordering': ['session', 'interval_number'],
                'unique_together': {('session', 'interval_number')},
            },
        ),
        migrations.CreateModel(
            name='BreakRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('break_start_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('break_end_time', models.DateTimeField(blank=True, null=True)),
                ('break_duration_seconds', models.PositiveIntegerField(default=0)),
                ('looked_at_distance', models.BooleanField(default=False)),
                ('break_completed', models.BooleanField(default=False)),
                ('break_type', models.CharField(choices=[('scheduled', 'Scheduled 20-20-20 Break'), ('manual', 'Manual Break'), ('extended', 'Extended Break')], default='scheduled', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('interval', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='break_taken', to='timer.timerinterval')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='breaks', to='timer.timersession')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='break_records', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Break Record',
                'verbose_name_plural': 'Break Records',
                'db_table': 'timer_break_record',
                'ordering': ['-break_start_time'],
            },
        ),
    ]
